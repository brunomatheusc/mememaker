{"ast":null,"code":"var _jsxFileName = \"/home/bmatheusc/Documentos/GitHub/tutorials/mememaker/src/pages/Home/index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Wrapper, Card, Templates, Form, Button } from './styles';\nimport logo from \"../../assets/logo.svg\";\nimport api from '../../services/api';\n\nconst Home = () => {\n  const [templates, setTemplates] = useState([]);\n  const [selectedTemplate, setSelectedTemplate] = useState();\n  const [boxes, setBoxes] = useState([]);\n  useEffect(() => {\n    (async () => {\n      const response = await api.get('https://api.imgflip.com/get_memes');\n      const {\n        data: {\n          memes\n        }\n      } = response.data;\n      setTemplates(memes);\n    })();\n  }, []);\n\n  const handleInputChange = index => e => {\n    const newValues = boxes;\n    newValues[index] = e.target.value;\n    setBoxes(newValues);\n  };\n\n  function handleSelectTemplate(template) {\n    setSelectedTemplate(template);\n    setBoxes([]);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    console.log(boxes);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logo,\n    alt: \"MemeMaker\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }\n  }, \"Selecione um template\"), /*#__PURE__*/React.createElement(Templates, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  }, templates.map(template => /*#__PURE__*/React.createElement(\"button\", {\n    key: template.id,\n    onClick: () => handleSelectTemplate(template),\n    className: template.id == (selectedTemplate === null || selectedTemplate === void 0 ? void 0 : selectedTemplate.id) ? 'selected' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: template.url,\n    alt: template.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 33\n    }\n  })))), selectedTemplate && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 29\n    }\n  }, \"Textos\"), /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 29\n    }\n  }, new Array(selectedTemplate.box_count).fill('').map((_, index) => /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    key: index,\n    placeholder: `Text #${index + 1}`,\n    onChange: handleInputChange(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 33\n    }\n  }, \"MakeMyMeme\"))))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/home/bmatheusc/Documentos/GitHub/tutorials/mememaker/src/pages/Home/index.tsx"],"names":["React","useState","useEffect","Wrapper","Card","Templates","Form","Button","api","Home","templates","setTemplates","selectedTemplate","setSelectedTemplate","boxes","setBoxes","response","get","data","memes","handleInputChange","index","e","newValues","target","value","handleSelectTemplate","template","handleSubmit","preventDefault","console","log","logo","map","id","url","name","Array","box_count","fill","_"],"mappings":"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","sourcesContent":["import React, { FC, useState, useEffect, ChangeEvent, FormEvent } from 'react';\nimport { Wrapper, Card, Templates, Form, Button } from './styles';\n\nimport logo from '../../assets/logo.svg';\nimport api from '../../services/api';\n\ninterface IProps {\n    data: IData;\n}\n\ninterface IData {\n    memes: ITemplate[];\n}\n\ninterface ITemplate {\n    id: number;\n    name: string;\n    url: string;\n    box_count: number;\n}\n\nconst Home: FC = () => {\n    const [templates, setTemplates] = useState<ITemplate[]>([]);\n    const [selectedTemplate, setSelectedTemplate] = useState<ITemplate>();\n    const [boxes, setBoxes] = useState<string[]>([]);\n\n    useEffect(() => {\n        (async () => {\n            const response = await api.get('https://api.imgflip.com/get_memes');           \n            const { data: { memes } } = response.data;\n\n            setTemplates(memes);\n        })();\n    }, []);\n\n    const handleInputChange = (index: number) => (e: ChangeEvent<HTMLInputElement>) => {\n        const newValues = boxes;\n        newValues[index] = e.target.value;\n        setBoxes(newValues);\n    }\n\n    function handleSelectTemplate(template: ITemplate) {\n        setSelectedTemplate(template);\n        setBoxes([]);\n    }\n\n    function handleSubmit(e: FormEvent) {\n        e.preventDefault();\n\n        console.log(boxes);\n    }\n\n    return (\n        <>\n            <Wrapper>\n                <img src={ logo } alt=\"MemeMaker\"/>\n\n                <Card>\n                    <h2>Selecione um template</h2>\n\n                    <Templates>\n                        { templates.map((template) => (\n                            <button key={ template.id } onClick={ () => handleSelectTemplate(template) } className={ template.id == selectedTemplate?.id ? 'selected' : '' }>\n                                <img src={ template.url } alt={ template.name } />\n                            </button>\n                        ))}\n                    </Templates>\n\n                    { selectedTemplate && (\n                        <>\n                            <h2>Textos</h2>\n\n                            <Form onSubmit={ handleSubmit }>\n                                { (new Array(selectedTemplate.box_count).fill('').map((_, index) => (\n                                    <input type=\"text\" key={index} placeholder={ `Text #${index + 1}`} onChange={ handleInputChange(index) } />\n                                )))}\n\n                                <Button type=\"submit\">MakeMyMeme</Button>\n                            </Form>\n                        </>\n                    )}\n\n                </Card>\n            </Wrapper>\n        </>\n    );\n};\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}