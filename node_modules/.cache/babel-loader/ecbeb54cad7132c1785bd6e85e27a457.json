{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nmodule.exports = ({\n  url,\n  dest,\n  timeout = 0,\n  ...options\n}) => new Promise((resolve, reject) => {\n  const request = url.trim().startsWith('https') ? require('https') : require('http');\n\n  if (timeout) {\n    request.setTimeout(timeout);\n  }\n\n  request.get(url, options, res => {\n    if (res.statusCode !== 200) {\n      // Consume response data to free up memory\n      res.resume();\n      reject(new Error('Request Failed.\\n' + `Status Code: ${res.statusCode}`));\n      return;\n    }\n\n    res.pipe(fs.createWriteStream(dest)).once('close', () => resolve({\n      filename: dest\n    }));\n  }).on('timeout', reject).on('error', reject);\n});","map":{"version":3,"sources":["/home/bmatheusc/Documentos/GitHub/tutorials/mememaker/node_modules/image-downloader/lib/request.js"],"names":["fs","require","module","exports","url","dest","timeout","options","Promise","resolve","reject","request","trim","startsWith","setTimeout","get","res","statusCode","resume","Error","pipe","createWriteStream","once","filename","on"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,IAAP;AAAaC,EAAAA,OAAO,GAAG,CAAvB;AAA0B,KAAGC;AAA7B,CAAD,KAA4C,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC5F,QAAMC,OAAO,GAAIP,GAAG,CAACQ,IAAJ,GAAWC,UAAX,CAAsB,OAAtB,IAAiCZ,OAAO,CAAC,OAAD,CAAxC,GAAoDA,OAAO,CAAC,MAAD,CAA5E;;AAEA,MAAIK,OAAJ,EAAa;AACXK,IAAAA,OAAO,CAACG,UAAR,CAAmBR,OAAnB;AACD;;AAEDK,EAAAA,OAAO,CACJI,GADH,CACOX,GADP,EACYG,OADZ,EACsBS,GAAD,IAAS;AAC1B,QAAIA,GAAG,CAACC,UAAJ,KAAmB,GAAvB,EAA4B;AAC1B;AACAD,MAAAA,GAAG,CAACE,MAAJ;AACAR,MAAAA,MAAM,CAAC,IAAIS,KAAJ,CAAU,sBACC,gBAAeH,GAAG,CAACC,UAAW,EADzC,CAAD,CAAN;AAGA;AACD;;AAEDD,IAAAA,GAAG,CAACI,IAAJ,CAASpB,EAAE,CAACqB,iBAAH,CAAqBhB,IAArB,CAAT,EAAqCiB,IAArC,CAA0C,OAA1C,EAAmD,MAAMb,OAAO,CAAC;AAAEc,MAAAA,QAAQ,EAAElB;AAAZ,KAAD,CAAhE;AACD,GAZH,EAaGmB,EAbH,CAaM,SAbN,EAaiBd,MAbjB,EAcGc,EAdH,CAcM,OAdN,EAced,MAdf;AAeD,CAtB4D,CAA7D","sourcesContent":["'use strict';\n\nconst fs = require('fs');\n\nmodule.exports = ({ url, dest, timeout = 0, ...options }) => new Promise((resolve, reject) => {\n  const request  = url.trim().startsWith('https') ? require('https') : require('http');\n\n  if (timeout) {\n    request.setTimeout(timeout);\n  }\n\n  request\n    .get(url, options, (res) => {\n      if (res.statusCode !== 200) {\n        // Consume response data to free up memory\n        res.resume();\n        reject(new Error('Request Failed.\\n' +\n                         `Status Code: ${res.statusCode}`));\n\n        return;\n      }\n\n      res.pipe(fs.createWriteStream(dest)).once('close', () => resolve({ filename: dest }));\n    })\n    .on('timeout', reject)\n    .on('error', reject);\n});\n"]},"metadata":{},"sourceType":"script"}